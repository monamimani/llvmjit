name: llvmjit

# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=vsts&tabs=schema

trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md

resources:
- repo: self

variables:
  BuidDir: 'build'

jobs:
- job: Generate_Build_Install
  timeoutInMinutes: 240

  pool:
    vmImage: 'VS2017-Win2016'

  strategy:
    maxParallel: 2
    matrix:
      debugJob:
        BuildConfiguration: debug
      releaseJob:
        BuildConfiguration: release

  steps:
  - checkout: self
    submodules: true

  - script: |
      call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
      set cc=cl
      set cxx=cl
      CMake -GNinja -H.\llvm -B.\$(BuidDir) -DCMAKE_INSTALL_PREFIX=$(Build.BinariesDirectory) -DCMAKE_BUILD_TYPE=$(BuildConfiguration) -DLLVM_TARGETS_TO_BUILD=X86 -DLLVM_ENABLE_WARNINGS=OFF -DLLVM_ENABLE_CXX1Z=ON -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_INCLUDE_DOCS=OFF -DLLVM_INCLUDE_TOOLS=OFF
      CMake --build .\$(BuidDir) --target install
    displayName: CMake Gen-Build-Install

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: $(Build.Repository.Name)_$(BuildConfiguration)_v$(Build.BuildId)'
    inputs:
      PathtoPublish: '$(Build.BinariesDirectory)'

      ArtifactName: '$(Build.Repository.Name)_$(BuildConfiguration)_v$(Build.BuildId)'

- job: Archive_Publish
  dependsOn: Generate_Build_Install
  condition: succeeded()
  variables:
    ArtifactPathRelease: '$(Build.StagingDirectory)/release/$(Build.Repository.Name)_release_v$(Build.BuildId)'
    ArtifactNameDebug: '$(Build.StagingDirectory)/debug/$(Build.Repository.Name)_debug_v$(Build.BuildId)'
  pool:
    demands: npm

  steps:
  - checkout: none
    submodules: true

  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts Debug'
    inputs:
      artifactName: '$(Build.Repository.Name)_debug_v$(Build.BuildId)'
      downloadPath: '$(Build.StagingDirectory)/debug'


  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts release'
    inputs:
      artifactName: '$(Build.Repository.Name)_release_v$(Build.BuildId)'
      downloadPath: '$(Build.StagingDirectory)/release'

  - script: |
      robocopy '$(ArtifactPathRelease)/include' '$(System.ArtifactsDirectory)/llvmJit/include' /s
      robocopy '$(ArtifactPathRelease)/lib' '$(System.ArtifactsDirectory)/llvmJit/release/lib' /s
      robocopy '$(ArtifactPathDebug)/lib' '$(System.ArtifactsDirectory)/llvmJit/debug/lib' /s
      robocopy '$(ArtifactPathRelease)/bin' '$(System.ArtifactsDirectory)/llvmJit/release/bin' /s
      robocopy '$(ArtifactPathDebug)/bin' '$(System.ArtifactsDirectory)/llvmJit/debug/bin' /s
    displayName: Copy files

  - task: ArchiveFiles@2
    displayName: 'Archive $(System.ArtifactsDirectory)'
    inputs:
      rootFolderOrFile: $(System.ArtifactsDirectory)
      archiveFile: '$(System.ArtifactsDirectory)/llvmJit_$(Build.BuildId).zip'

  - task: marcelo-formentao.github-tools.github-release-publish-task.GitHubReleasePublish@0
    displayName: 'GitHub Release $(Build.Repository.Name)_v$(Build.BuildId)'
    inputs:
      githubEndpoint: 'GitHub monamimani'
      githubRepository: monamimani/llvmjit
      githubTag: 'llvmJit_v$(Build.BuildNumber)'
      githubReleaseTitle: 'llvmJit_v$(Build.BuildNumber)'
      githubReleaseNotes: "Build commit id $(Build.SourceVersion)"
      githubReleaseDraft: false
      githubReleaseAsset: '$(System.ArtifactsDirectory)/llvmJit_$(Build.BuildId).zip'
